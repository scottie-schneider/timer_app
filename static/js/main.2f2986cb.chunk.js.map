{"version":3,"sources":["components/TimerForm.js","components/TimerActionButton.js","components/Timer.js","components/EditableTimer.js","components/EditableTimerList.js","components/ToggleableTimerForm.js","components/TimersDashboard.js","serviceWorker.js","index.js"],"names":["TimerForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","title","project","handleTitleChange","e","setState","target","value","handleProjectChange","handleSubmit","onFormSubmit","id","bind","assertThisInitialized","submitText","react_default","a","createElement","className","type","onChange","onClick","onFormClose","React","Component","TimerActionButton","timerIsRunning","onStopClick","onStartClick","Timer","handleStartClick","handleStopClick","handleTrashClick","onTrashClick","renderElapsedString","elapsed","runningSince","totalElapsed","Date","now","millisecondsToHuman","ms","seconds","Math","floor","minutes","hours","pad","toString","join","numberString","size","padded","length","concat","_this2","forceUpdateInterval","setInterval","forceUpdate","clearInterval","elapsedString","onEditClick","components_TimerActionButton","EditableTimer","editFormOpen","handleEditClick","openForm","handleFormClose","closeForm","timer","components_TimerForm","components_Timer","EditableTimerList","timers","map","components_EditableTimer","key","ToggleableTimerForm","isOpen","handleFormOpen","handleFormSubmit","TimersDashboard","loadTimersFromServer","getTimers","serverTimers","success","fetch","headers","Accept","then","checkStatus","parseJSON","response","status","console","log","error","Error","statusText","json","newTimer","attrs","arguments","undefined","uuid","v4","handleCreateFormSubmit","createTimer","handleEditFormSubmit","updateTimer","t","createTimerData","data","method","body","JSON","stringify","Content-Type","assign","updateTimerData","timerId","deleteTimer","startTimer","stopTimer","filter","deleteTimerData","startTimerData","start","lastElapsed","stopTimerData","stop","components_EditableTimerList","components_ToggleableTimerForm","Boolean","window","location","hostname","match","ReactDOM","render","BrowserRouter","Route","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2f2986cb.chunk.js","sourcesContent":["import React from 'react';\n\nclass TimerForm extends React.Component {\n  constructor(props) {\n    super(props);\n    \n    this.handleTitleChange = this.handleTitleChange.bind(this);\n    this.handleProjectChange = this.handleProjectChange.bind(this);\n  }\n  \n  state = {\n      title: this.props.title || '',\n      project: this.props.project || '',\n  };\n  \n  handleTitleChange = (e) => {\n    this.setState({ title: e.target.value });\n  };\n  \n  handleProjectChange = (e) => {\n    this.setState({ project: e.target.value });\n  };\n  \n  handleSubmit = () => {\n    this.props.onFormSubmit({\n      id: this.props.id,\n      title: this.state.title,\n      project: this.state.project,\n    });\n  };\n  \n  render() {\n    const submitText = this.props.id ? 'Update' : 'Create';\n    return (\n      <div className='ui centered card'>\n        <div className='content'>\n          <div className='ui form'>\n            <div className='field'>\n              <label>Title</label>\n              <input\n                type='text'\n                value={this.state.title}\n                onChange={this.handleTitleChange}\n              />\n            </div>\n            <div className='field'>\n              <label>Project</label>\n              <input\n                type='text'\n                value={this.state.project}\n                onChange={this.handleProjectChange}\n              />\n            </div>\n            <div className='ui two bottom attached buttons'>\n              <button\n                className='ui basic blue button'\n                onClick={this.handleSubmit}\n              >\n                {submitText}\n              </button>\n              <button\n                className='ui basic red button'\n                onClick={this.props.onFormClose}\n              >\n                Cancel\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TimerForm;\n","import React from 'react';\n\nclass TimerActionButton extends React.Component {\n  \n  render() {\n    if(this.props.timerIsRunning) {\n      return (\n        <div\n          className=\"ui bottom attached red basic button\"\n          onClick={this.props.onStopClick}\n        >\n          Stop\n        </div>\n      );\n    } else {\n      return (\n        <div\n          className=\"ui bottom attached green basic button\"\n          onClick={this.props.onStartClick}\n        >\n          Start\n        </div>\n      )\n    }\n  }\n}\n\nexport default TimerActionButton;\n","import React from 'react';\nimport TimerActionButton from './TimerActionButton'\n\nclass Timer extends React.Component {\n  componentDidMount() {\n    this.forceUpdateInterval = setInterval(() => this.forceUpdate(), 50);\n  }\n  \n  componentWillUnmount() {\n    clearInterval(this.forceUpdateInterval)\n  }\n  \n  handleStartClick = () => {\n    this.props.onStartClick(this.props.id)\n  }\n  \n  handleStopClick = () => {\n    this.props.onStopClick(this.props.id)\n  }\n  \n  handleTrashClick = () => {\n    this.props.onTrashClick(this.props.id);\n  }\n  \n  renderElapsedString = (elapsed, runningSince) => {\n    let totalElapsed = elapsed;\n    if (runningSince) {\n      totalElapsed += Date.now() - runningSince;\n    }\n    return this.millisecondsToHuman(totalElapsed);\n  }\n  millisecondsToHuman = (ms) => {\n    const seconds = Math.floor((ms / 1000) % 60);\n    const minutes = Math.floor((ms / 1000 / 60) % 60);\n    const hours = Math.floor(ms / 1000 / 60 / 60);\n\n    const humanized = [\n      this.pad(hours.toString(), 2),\n      this.pad(minutes.toString(), 2),\n      this.pad(seconds.toString(), 2),\n    ].join(':');\n\n    return humanized;\n  }\n  \n  pad = (numberString, size) => {\n    let padded = numberString;\n    while (padded.length < size) padded = `0${padded}`;\n    return padded;\n  }\n  \n  render() {\n    const elapsedString = this.renderElapsedString(this.props.elapsed, this.props.runningSince)\n    return (\n      <div className='ui centered card'>\n        <div className='content'>\n          <div className='header'>\n            {this.props.title}\n          </div>\n          <div className='meta'>\n            {this.props.project}\n          </div>\n          <div className=\"center aligned description\">\n            <h2>\n              {elapsedString}\n            </h2>\n          </div>\n          <div className='extra content'>\n            <span\n              className='right floated edit icon'\n              onClick={(this.props.onEditClick)}\n            >\n              <i className='edit icon' />\n            </span>\n            <span\n              className='right floated trash icon'\n              onClick={this.handleTrashClick}\n            >\n              <i className='trash icon' />\n            </span>\n          </div>\n        </div>\n        <TimerActionButton\n          timerIsRunning={!!this.props.runningSince}\n          onStartClick={this.handleStartClick}\n          onStopClick={this.handleStopClick}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Timer;\n","import React from 'react';\nimport TimerForm from './TimerForm'\nimport Timer from './Timer'\n\nclass EditableTimer extends React.Component {\n  state = {\n    editFormOpen: false,\n  };\n  \n  handleEditClick = () => {\n    this.openForm();\n  }\n  \n  handleFormClose = () => {\n    this.closeForm();\n  }\n  \n  handleSubmit = (timer) => {\n    this.props.onFormSubmit(timer);\n    this.closeForm();\n  }\n  \n  closeForm = () => {\n    this.setState({ editFormOpen: false })\n  }\n  \n  openForm = () => {\n    this.setState({ editFormOpen: true })\n  }\n  render() {\n    if (this.state.editFormOpen) {\n      return (\n        <TimerForm\n          id={this.props.id}\n          title={this.props.title}\n          project={this.props.project}\n          onFormSubmit={this.handleSubmit}\n          onFormClose={this.handleFormClose}\n        />\n      );\n    } else {\n      return (\n        <Timer\n          id={this.props.id}\n          title={this.props.title}\n          project={this.props.project}\n          elapsed={this.props.elapsed}\n          runningSince={this.props.runningSince}\n          onEditClick={this.handleEditClick}\n          onTrashClick={this.props.onTrashClick}\n          onStartClick={this.props.onStartClick}\n          onStopClick={this.props.onStopClick}\n        />\n      );\n    }\n  }\n}\n\nexport default EditableTimer;\n","import React from 'react';\nimport EditableTimer from './EditableTimer'\n\nclass EditableTimerList extends React.Component {\n  render() {\n    const timers = this.props.timers.map((timer) => (\n      <EditableTimer\n        key={timer.id}\n        id={timer.id}\n        title={timer.title}\n        project={timer.project}\n        elapsed={timer.elapsed}\n        runningSince={timer.runningSince}\n        onFormSubmit={this.props.onFormSubmit}\n        onTrashClick={this.props.onTrashClick}\n        onStartClick={this.props.onStartClick}\n        onStopClick={this.props.onStopClick}\n      />\n    ));\n    return (\n      <div id=\"timers\">\n        {timers}\n      </div>\n    )\n  }\n}\n\nexport default EditableTimerList;\n","import React from 'react';\nimport TimerForm from './TimerForm'\n\nclass ToggleableTimerForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleFormOpen = this.handleFormOpen.bind(this);\n  }\n  \n  state = {\n    isOpen: false,\n  };\n  \n  handleFormOpen = () => {\n    this.setState({ isOpen: true });\n  };\n  \n  handleFormClose = () => {\n    this.setState({ isOpen: false });\n  };\n  \n  handleFormSubmit = (timer) => {\n    this.props.onFormSubmit(timer);\n    this.setState({ isOpen: false });\n  };\n  \n  render() {\n    if (this.state.isOpen) {\n      return (\n        <TimerForm\n          onFormSubmit={this.handleFormSubmit}\n          onFormClose={this.handleFormClose}\n        />\n      );\n    } else {\n      return (\n        <div className='ui basic content center aligned segment'>\n          <button\n            className='ui basic button icon'\n            onClick={this.handleFormOpen}\n          >\n            <i className='plus icon' />\n          </button>\n        </div>\n      );\n    }\n  }\n}\n\nexport default ToggleableTimerForm;\n","import React from 'react';\nimport EditableTimerList from './EditableTimerList'\nimport ToggleableTimerForm from './ToggleableTimerForm'\n\nclass TimersDashboard extends React.Component {\n  state = {\n    timers: [],\n  };\n  \n  componentDidMount() {\n    this.loadTimersFromServer();\n    setInterval(this.loadTimersFromServer, 5000);\n  }\n  \n  loadTimersFromServer = () => {\n    this.getTimers((serverTimers) => (\n      this.setState({ timers: serverTimers })\n      )\n    )\n  }\n  \n  getTimers = (success) => {\n    return fetch('http://localhost:5000/api/timers', {\n      headers: {\n        Accept: 'application/json',\n      },\n    }).then(this.checkStatus)\n      .then(this.parseJSON)\n      .then(success);\n  }\n  \n  checkStatus = (response) => {\n    if (response.status >= 200 && response.status < 300) {\n      console.log(response)\n      return response;\n    } else {\n      const error = new Error(`HTTP Error ${response.statusText}`);\n      error.status = response.statusText;\n      error.response = response;\n      console.log(error);\n      throw error;\n    }\n  }\n  \n  parseJSON = (response) => {\n    return response.json();\n  }\n  \n  newTimer = (attrs = {}) => {\n    const timer = {\n      title: attrs.title || 'Timer',\n      project: attrs.project || 'Project',\n      id: uuid.v4(), // eslint-disable-line no-undef\n      elapsed: 0,\n    };\n\n    return timer;\n  }\n  \n  handleCreateFormSubmit = (timer) => {\n    this.createTimer(timer);\n  };\n  \n  handleEditFormSubmit = (attrs) => {\n    this.updateTimer(attrs);\n  }\n  \n  createTimer = (timer) => {\n    const t = this.newTimer(timer);\n    this.setState({\n      timers: this.state.timers.concat(t),\n    });\n    \n    this.createTimerData(t);\n  };\n  \n  createTimerData = (data) => {\n    return fetch('/api/timers', {\n      method: 'post',\n      body: JSON.stringify(data),\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n    }).then(this.checkStatus);\n  }\n  \n  updateTimer = (attrs) => {\n    this.setState({\n      timers: this.state.timers.map((timer) => {\n        if(timer.id === attrs.id){\n          return Object.assign({}, timer, {\n            title: attrs.title,\n            project: attrs.project,\n          });\n        } else {\n          return timer;\n        }\n      }),\n    });\n    this.updateTimerData(attrs)\n  };\n  \n  updateTimerData = (data) => {\n    return fetch('/api/timers', {\n      method: 'put',\n      body: JSON.stringify(data),\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n    }).then(this.checkStatus);\n  }\n  \n  handleTrashClick = (timerId) => {\n    this.deleteTimer(timerId);\n  };\n  \n  handleStartClick = (timerId) => {\n    this.startTimer(timerId);\n  };\n  \n  handleStopClick = (timerId) => {\n    this.stopTimer(timerId);\n  };\n  \n  deleteTimer = (timerId) => {\n      this.setState({\n        timers: this.state.timers.filter(t => t.id !== timerId),\n      });\n      this.deleteTimerData({\n        id: timerId\n      });\n  };\n  \n  deleteTimerData = (data) => {\n    return fetch('/api/timers', {\n      method: 'delete',\n      body: JSON.stringify(data),\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n    }).then(this.checkStatus);\n  }\n  \n  startTimer = (timerId) => {\n    const now = Date.now();\n    \n    this.setState({\n      timers: this.state.timers.map((timer) => {\n        if (timer.id === timerId) {\n          return Object.assign({}, timer, {\n            runningSince: now,\n          });\n        } else {\n          return timer;\n        }\n      }),\n    });\n    this.startTimerData(\n      { id: timerId, start: now }\n    );\n  };\n  \n  startTimerData = (data) => {\n    return fetch('/api/timers/start', {\n      method: 'post',\n      body: JSON.stringify(data),\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n    }).then(this.checkStatus);\n  }\n\n  stopTimer = (timerId) => {\n    const now = Date.now();\n    \n    this.setState({\n      timers: this.state.timers.map((timer) => {\n        if (timer.id === timerId) {\n          const lastElapsed = now - timer.runningSince;\n          return Object.assign({}, timer, {\n            elapsed: timer.elapsed + lastElapsed,\n            runningSince: null,\n          });\n        } else {\n          return timer;\n        }\n      }),\n    });\n    this.stopTimerData(\n      { id: timerId, stop: now }\n    );\n  };\n  \n  stopTimerData = (data) => {\n    return fetch('/api/timers/stop', {\n      method: 'post',\n      body: JSON.stringify(data),\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n    }).then(this.checkStatus);\n  }\n  \n  \n  render() {\n    return (\n      <div className='ui three column centered grid'>\n        <div className='column'>\n          <EditableTimerList\n            timers={this.state.timers}\n            onFormSubmit={this.handleEditFormSubmit}\n            onTrashClick={this.handleTrashClick}\n            onStartClick={this.handleStartClick}\n            onStopClick={this.handleStopClick}\n          />\n          <ToggleableTimerForm\n            onFormSubmit={this.handleCreateFormSubmit}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TimersDashboard;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\n\nimport './index.css';\nimport TimersDashboard from './components/TimersDashboard';\nimport Timer from './components/Timer';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <Router>\n    <div>\n      <Route exact path=\"/\" component={TimersDashboard} />\n      <Route exact path=\"/timer\" component={Timer}/>\n    </div>\n  </Router>\n,document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}